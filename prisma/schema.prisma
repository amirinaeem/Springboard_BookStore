generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          Role         @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  addresses     Address[]
  carts         Cart[]
  collections   Collection[]
  orders        Order[]
  reviews       Review[]
  sessions      Session[]
  wishlists     Wishlist[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  line1     String
  line2     String?
  city      String
  state     String
  postal    String
  country   String
  isDefault Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Author {
  id    String @id @default(cuid())
  name  String @unique
  books Book[] @relation("AuthorToBook")
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  books Book[] @relation("BookToCategory")
}

model Book {
  id              String           @id @default(cuid())
  title           String
  subtitle        String?
  description     String?
  isbn10          String?          @unique
  isbn13          String?          @unique
  coverUrl        String?
  priceCents      Int              @default(1500)
  currency        String           @default("usd")
  inventory       Int              @default(100)
  publishedAt     DateTime?
  googleVolumeId  String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  fileUrl         String?
  cartItems       CartItem[]
  collectionItems CollectionItem[]
  orderItems      OrderItem[]
  reviews         Review[]
  wishlistBy      Wishlist[]
  authors         Author[]         @relation("AuthorToBook")
  categories      Category[]       @relation("BookToCategory")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id     String @id @default(cuid())
  cartId String
  bookId String
  qty    Int    @default(1)
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, bookId])
}

model Order {
  id            String      @id @default(cuid())
  userId        String?
  email         String
  totalCents    Int
  currency      String      @default("usd")
  status        OrderStatus @default(PENDING)
  stripeSession String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User?       @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  bookId    String
  qty       Int
  unitCents Int
  book      Book   @relation(fields: [bookId], references: [id])
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Review {
  id      String  @id @default(cuid())
  userId  String
  bookId  String
  rating  Int
  content String?
  book    Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Wishlist {
  id     String @id @default(cuid())
  userId String
  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Collection {
  id        String           @id @default(cuid())
  userId    String
  name      String
  slug      String           @unique
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CollectionItem[]

  @@unique([userId, name])
}

model CollectionItem {
  id           String     @id @default(cuid())
  collectionId String
  bookId       String
  notes        String?
  book         Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, bookId])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
}
