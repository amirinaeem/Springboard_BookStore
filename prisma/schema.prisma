
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          Role      @default(USER)

  accounts   Account[]
  sessions   Session[]
  addresses  Address[]
  carts      Cart[]
  orders     Order[]
  reviews    Review[]
  wishlists  Wishlist[]
  collections Collection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  line1     String
  line2     String?
  city      String
  state     String
  postal    String
  country   String
  isDefault Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Author {
  id    String @id @default(cuid())
  name  String @unique
  books Book[]
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  books Book[]
}

model Book {
  id             String    @id @default(cuid())
  title          String
  subtitle       String?
  description    String?
  isbn10         String?   @unique
  isbn13         String?   @unique
  coverUrl       String?
  fileUrl        String?   // optional download URL
  priceCents     Int       @default(1500)
  currency       String    @default("usd")
  inventory      Int       @default(100)
  publishedAt    DateTime?
  googleVolumeId String?   @unique

  authors     Author[]
  categories  Category[]
  reviews     Review[]
  orderItems  OrderItem[]
  wishlistBy  Wishlist[]
  cartItems   CartItem[]
  collectionItems CollectionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model CartItem {
  id     String @id @default(cuid())
  cartId String
  bookId String
  qty    Int    @default(1)

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([cartId, bookId])
}

model Order {
  id            String      @id @default(cuid())
  userId        String?
  email         String
  totalCents    Int
  currency      String      @default("usd")
  status        OrderStatus @default(PENDING)
  stripeSession String?

  items     OrderItem[]
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  bookId    String
  qty       Int
  unitCents Int

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book  Book  @relation(fields: [bookId], references: [id], onDelete: Restrict)
}

model Review {
  id      String  @id @default(cuid())
  userId  String
  bookId  String
  rating  Int
  content String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Wishlist {
  id     String @id @default(cuid())
  userId String
  bookId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

// ----------------------------
// Collections (user-defined shelves)
// ----------------------------
model Collection {
  id        String           @id @default(cuid())
  userId    String
  name      String
  slug      String           @unique
  items     CollectionItem[]
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model CollectionItem {
  id           String @id @default(cuid())
  collectionId String
  bookId       String
  notes        String?

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  book       Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([collectionId, bookId])
}
